version: '3.8'

services:
  # CyberNox Main Application
  cybernox:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cybernox-app
    ports:
      - "5000:5000"   # API and Web Interface
      - "8080:8080"   # Alternative port
    environment:
      - PYTHONPATH=/app
      - CYBERNOX_ENV=production
      - FLASK_ENV=production
      - TZ=UTC
    volumes:
      - ./config:/app/config:ro              # Configuration files
      - ./data:/app/data:ro                  # Wordlists and data
      - cybernox_reports:/app/reports        # Reports output
      - cybernox_logs:/app/logs              # Application logs
    networks:
      - cybernox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cybernox-redis
    ports:
      - "6379:6379"
    volumes:
      - cybernox_redis_data:/data
    networks:
      - cybernox-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass cybernox-redis-pass
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: cybernox-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cybernox
      - POSTGRES_USER=cybernox
      - POSTGRES_PASSWORD=cybernox-secure-password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - cybernox_postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cybernox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybernox -d cybernox"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: cybernox-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - cybernox_logs:/var/log/nginx
    networks:
      - cybernox-network
    restart: unless-stopped
    depends_on:
      - cybernox
    profiles:
      - with-nginx

  # Development version with live reload
  cybernox-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cybernox-dev
    ports:
      - "5001:5000"   # Development port
    environment:
      - PYTHONPATH=/app
      - CYBERNOX_ENV=development
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - .:/app                               # Live code mounting
      - cybernox_dev_reports:/app/reports    # Reports output
      - cybernox_dev_logs:/app/logs          # Application logs
    networks:
      - cybernox-network
    restart: "no"
    profiles:
      - development
    depends_on:
      - redis
      - postgres

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cybernox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - cybernox_prometheus_data:/prometheus
    networks:
      - cybernox-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cybernox-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cybernox-admin
    volumes:
      - cybernox_grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    networks:
      - cybernox-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  cybernox_reports:
    driver: local
  cybernox_logs:
    driver: local
  cybernox_redis_data:
    driver: local
  cybernox_postgres_data:
    driver: local
  cybernox_dev_reports:
    driver: local
  cybernox_dev_logs:
    driver: local
  cybernox_prometheus_data:
    driver: local
  cybernox_grafana_data:
    driver: local

# Networks
networks:
  cybernox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
